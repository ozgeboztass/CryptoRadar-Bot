#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import logging
import json
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, Filters, CallbackQueryHandler
from pycoingecko import CoinGeckoAPI

# Loglama yapƒ±landƒ±rmasƒ±
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# .env dosyasƒ±ndan √ßevresel deƒüi≈ükenleri y√ºkle
load_dotenv()

# CoinGecko API istemcisini ba≈ülat
cg = CoinGeckoAPI()

# Favori kripto paralarƒ± depolamak i√ßin dosya adƒ±
FAVORITES_FILE = 'user_favorites.json'
# Portf√∂y verilerini saklamak i√ßin dosya adƒ±
PORTFOLIO_FILE = 'user_portfolios.json'

# Kripto kƒ±saltmalarƒ± i√ßin s√∂zl√ºk - daha dinamik bir √ß√∂z√ºm
CRYPTO_SYMBOLS = {
    'btc': 'bitcoin',
    'eth': 'ethereum',
    'sol': 'solana',
    'doge': 'dogecoin',
    'xrp': 'ripple',
    'ada': 'cardano',
    'dot': 'polkadot',
    'ltc': 'litecoin',
    'bnb': 'binancecoin',
    'usdt': 'tether',
    'usdc': 'usd-coin',
    'matic': 'polygon',
    'link': 'chainlink',
    'uni': 'uniswap',
    'avax': 'avalanche-2'
}

def convert_crypto_symbol(symbol: str) -> str:
    """Kripto para sembollerini tam adlara d√∂n√º≈üt√ºr√ºr."""
    symbol = symbol.lower()
    return CRYPTO_SYMBOLS.get(symbol, symbol)  # Eƒüer s√∂zl√ºkte yoksa kendisini d√∂nd√ºr

def validate_date(date_str: str) -> bool:
    """Tarih formatƒ±nƒ±n ge√ßerli olup olmadƒ±ƒüƒ±nƒ± kontrol eder (YYYY-MM-DD)."""
    try:
        datetime.strptime(date_str, "%Y-%m-%d")
        return True
    except ValueError:
        return False

def load_favorites():
    """Kullanƒ±cƒ±larƒ±n favori kripto paralarƒ±nƒ± y√ºkler"""
    try:
        if os.path.exists(FAVORITES_FILE):
            with open(FAVORITES_FILE, 'r') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"Favorileri y√ºklerken hata: {e}")
        return {}

def save_favorites(favorites):
    """Kullanƒ±cƒ±larƒ±n favori kripto paralarƒ±nƒ± kaydeder"""
    try:
        with open(FAVORITES_FILE, 'w') as f:
            json.dump(favorites, f)
    except Exception as e:
        logger.error(f"Favorileri kaydederken hata: {e}")

def load_portfolios():
    """Kullanƒ±cƒ±larƒ±n portf√∂y verilerini y√ºkler"""
    try:
        if os.path.exists(PORTFOLIO_FILE):
            with open(PORTFOLIO_FILE, 'r') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"Portf√∂yleri y√ºklerken hata: {e}")
        return {}

def save_portfolios(portfolios):
    """Kullanƒ±cƒ±larƒ±n portf√∂y verilerini kaydeder"""
    try:
        with open(PORTFOLIO_FILE, 'w') as f:
            json.dump(portfolios, f, indent=4)
    except Exception as e:
        logger.error(f"Portf√∂yleri kaydederken hata: {e}")

# Favori kripto paralarƒ± ve portf√∂yleri y√ºkle
user_favorites = load_favorites()
user_portfolios = load_portfolios()

def start(update: Update, context: CallbackContext) -> None:
    """Ba≈ülangƒ±√ß komutunu i≈üler."""
    user = update.effective_user
    update.message.reply_text(
        f'Merhaba {user.first_name}! Ben Kripto Para Fiyat Botuyum.\n\n'
        f'Kullanƒ±labilir komutlar:\n'
        f'/price [kripto_kodu] - Kripto fiyatlarƒ±nƒ± g√∂sterir (√∂rn: /price btc)\n'
        f'/top - En b√ºy√ºk 10 kriptoyu listeler\n'
        f'/add [kripto_kodu] - Kripto parayƒ± favorilere ekler (√∂rn: /add sol)\n'
        f'/favorites - Favori kripto paralarƒ±nƒ±zƒ± listeler\n'
        f'/remove [kripto_kodu] - Kripto parayƒ± favorilerden kaldƒ±rƒ±r (√∂rn: /remove sol)\n'
        f'/portfolio - Portf√∂y√ºn√ºz√º g√∂sterir\n'
        f'/add_transaction - Portf√∂y√ºn√ºze i≈ülem eklemenizi saƒülar\n'
        f'/performance - Portf√∂y√ºn√ºz√ºn performansƒ±nƒ± g√∂sterir\n'
        f'/list_transactions - T√ºm i≈ülemlerinizi listeler\n'
        f'/help - T√ºm komutlarƒ± g√∂sterir'
    )

def help_command(update: Update, context: CallbackContext) -> None:
    """Yardƒ±m komutunu i≈üler."""
    update.message.reply_text(
        '*Kullanƒ±labilir Komutlar*\n\n'
        '*Kripto Fiyat Komutlarƒ±:*\n'
        '/price [kripto_kodu] - Belirtilen kripto paranƒ±n fiyatƒ±nƒ± g√∂sterir.\n'
        '√ñrnek: /price btc, /price eth veya /price btc eth\n\n'
        '/top - Piyasa deƒüerine g√∂re en b√ºy√ºk 10 kripto parayƒ± listeler\n\n'
        '/list - Pop√ºler kripto paralarƒ±n listesini g√∂sterir\n\n'
        '*Favori Komutlarƒ±:*\n'
        '/add [kripto_kodu] - Kripto parayƒ± favorilerinize ekler\n'
        '√ñrnek: /add sol\n\n'
        '/favorites - Favori kripto paralarƒ±nƒ±zƒ±n listesini g√∂sterir\n\n'
        '/remove [kripto_kodu] - Kripto parayƒ± favorilerinizden kaldƒ±rƒ±r\n'
        '√ñrnek: /remove sol\n\n'
        '*Portf√∂y Takip Komutlarƒ±:*\n'
        '/portfolio - Portf√∂y√ºn√ºz√º g√∂r√ºnt√ºler\n\n'
        '/add_transaction - Portf√∂y√ºn√ºze i≈ülem eklemenizi saƒülar\n'
        '√ñrnek: /add_transaction btc buy 0.05 35000 2023-11-20 10\n\n'
        '/performance - Portf√∂y√ºn√ºz√ºn performansƒ±nƒ± ve kar/zarar durumunu g√∂sterir\n\n'
        '/list_transactions - T√ºm i≈ülemlerinizi listeler\n\n'
        '/delete_transaction [kripto_kodu] [i≈ülem_no] - Belirtilen i≈ülemi siler\n'
        '√ñrnek: /delete_transaction btc 1',
        parse_mode=ParseMode.MARKDOWN
    )

def get_crypto_price(crypto_id: str) -> dict:
    """Belirtilen kripto paranƒ±n fiyat bilgisini d√∂nd√ºr√ºr."""
    try:
        # Kripto kodu kƒ±saltmasƒ±nƒ± tam ada d√∂n√º≈üt√ºr
        crypto_id = convert_crypto_symbol(crypto_id)
        
        # CoinGecko API'den kripto para bilgilerini al
        price_data = cg.get_price(
            ids=crypto_id, 
            vs_currencies=['usd', 'eur', 'try'], 
            include_market_cap=True,
            include_24hr_change=True
        )
        
        if not price_data or crypto_id not in price_data:
            return {"error": f"{crypto_id} i√ßin veri bulunamadƒ±."}
        
        return {
            "id": crypto_id,
            "data": price_data[crypto_id]
        }
    except Exception as e:
        logger.error(f"Kripto veri alƒ±rken hata: {e}")
        return {"error": f"Veri alƒ±nƒ±rken bir hata olu≈ütu: {str(e)}"}

def format_price_message(crypto_data: dict) -> str:
    """Kripto para verilerini okunabilir bir mesaja d√∂n√º≈üt√ºr√ºr."""
    if "error" in crypto_data:
        return crypto_data["error"]
    
    crypto_id = crypto_data["id"]
    data = crypto_data["data"]
    
    # ƒ∞smin ilk harfini b√ºy√ºk yap
    crypto_name = crypto_id.capitalize()
    
    message = f"*{crypto_name}* Fiyat Bilgisi:\n\n"
    
    # USD fiyatƒ±
    if "usd" in data:
        usd_price = data["usd"]
        message += f"üíµ *USD*: ${usd_price:,.2f}\n"
    
    # EUR fiyatƒ±
    if "eur" in data:
        eur_price = data["eur"]
        message += f"üí∂ *EUR*: ‚Ç¨{eur_price:,.2f}\n"
    
    # TRY fiyatƒ±
    if "try" in data:
        try_price = data["try"]
        message += f"üí∑ *TRY*: ‚Ç∫{try_price:,.2f}\n"
    
    # 24 saatlik deƒüi≈üim
    if "usd_24h_change" in data:
        change_24h = data["usd_24h_change"]
        emoji = "üü¢" if change_24h > 0 else "üî¥"
        message += f"{emoji} *24s Deƒüi≈üim*: %{change_24h:.2f}\n"
    
    # Piyasa deƒüeri
    if "usd_market_cap" in data:
        market_cap = data["usd_market_cap"]
        message += f"üìä *Piyasa Deƒüeri*: ${market_cap:,.0f}\n"
    
    return message

def price_command(update: Update, context: CallbackContext) -> None:
    """Kripto para fiyat komutunu i≈üler."""
    if not context.args:
        update.message.reply_text(
            "L√ºtfen fiyatƒ±nƒ± √∂ƒürenmek istediƒüiniz kripto para kodunu belirtin. "
            "√ñrnek: /price btc"
        )
        return
    
    # T√ºm arg√ºmanlarƒ± al ve her biri i√ßin fiyat sorgulama yap
    crypto_ids = [arg.lower() for arg in context.args]
    
    for crypto_id in crypto_ids:
        crypto_data = get_crypto_price(crypto_id)
        message = format_price_message(crypto_data)
        update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

def list_command(update: Update, context: CallbackContext) -> None:
    """Pop√ºler kripto paralarƒ± listeler."""
    try:
        # CoinGecko API'den pop√ºler kripto paralarƒ± al
        top_coins = cg.get_coins_markets(
            vs_currency='usd',
            order='market_cap_desc',
            per_page=10,
            page=1
        )
        
        message = "*Pop√ºler Kripto Paralar:*\n\n"
        
        for i, coin in enumerate(top_coins, 1):
            price = coin['current_price']
            change_24h = coin['price_change_percentage_24h'] or 0
            emoji = "üü¢" if change_24h > 0 else "üî¥"
            
            message += f"{i}. *{coin['name']}* ({coin['symbol'].upper()})\n"
            message += f"   üíµ ${price:,.2f} | {emoji} %{change_24h:.2f}\n"
            message += f"   `/price {coin['id']}`\n\n"
        
        update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"Pop√ºler kriptolarƒ± listelerken hata: {e}")
        update.message.reply_text(f"Pop√ºler kripto paralarƒ± listelerken bir hata olu≈ütu: {str(e)}")

def top_command(update: Update, context: CallbackContext) -> None:
    """En b√ºy√ºk 10 kriptoyu listeler. (list_command ile aynƒ± i≈ülevi g√∂r√ºr)"""
    try:
        # CoinGecko API'den pop√ºler kripto paralarƒ± al
        top_coins = cg.get_coins_markets(
            vs_currency='usd',
            order='market_cap_desc',
            per_page=10,
            page=1
        )
        
        message = "*En B√ºy√ºk 10 Kripto Para:*\n\n"
        
        for i, coin in enumerate(top_coins, 1):
            price = coin['current_price']
            change_24h = coin['price_change_percentage_24h'] or 0
            emoji = "üü¢" if change_24h > 0 else "üî¥"
            market_cap = coin['market_cap']
            
            message += f"{i}. *{coin['name']}* ({coin['symbol'].upper()})\n"
            message += f"   üíµ ${price:,.2f} | {emoji} %{change_24h:.2f}\n"
            message += f"   üìä Piyasa Deƒüeri: ${market_cap:,.0f}\n"
            message += f"   Kod: `/price {coin['id']}`\n\n"
        
        update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"En b√ºy√ºk kriptolarƒ± listelerken hata: {e}")
        update.message.reply_text(f"En b√ºy√ºk kripto paralarƒ± listelerken bir hata olu≈ütu: {str(e)}")

def add_favorite(update: Update, context: CallbackContext) -> None:
    """Kripto parayƒ± kullanƒ±cƒ±nƒ±n favorilerine ekler."""
    if not context.args:
        update.message.reply_text(
            "L√ºtfen favorilerinize eklemek istediƒüiniz kripto para kodunu belirtin. "
            "√ñrnek: /add btc"
        )
        return
    
    crypto_id = context.args[0].lower()
    
    # Kripto kodu kƒ±saltmasƒ±nƒ± tam ada d√∂n√º≈üt√ºr
    crypto_id = convert_crypto_symbol(crypto_id)
    
    # Kripto para kodunun ge√ßerli olup olmadƒ±ƒüƒ±nƒ± kontrol et
    try:
        result = get_crypto_price(crypto_id)
        if "error" in result:
            update.message.reply_text(f"Hata: {result['error']}")
            return
        
        user_id = str(update.effective_user.id)
        
        # Kullanƒ±cƒ±nƒ±n favori listesini al veya olu≈ütur
        if user_id not in user_favorites:
            user_favorites[user_id] = []
        
        # Zaten favorilerde var mƒ± kontrol et
        if crypto_id in user_favorites[user_id]:
            update.message.reply_text(f"{crypto_id.capitalize()} zaten favorilerinizde!")
            return
        
        # Favorilere ekle
        user_favorites[user_id].append(crypto_id)
        save_favorites(user_favorites)
        
        update.message.reply_text(f"{crypto_id.capitalize()} favorilerinize eklendi! üìå")
    except Exception as e:
        logger.error(f"Favorilere eklerken hata: {e}")
        update.message.reply_text(f"ƒ∞≈ülem sƒ±rasƒ±nda bir hata olu≈ütu: {str(e)}")

def remove_favorite(update: Update, context: CallbackContext) -> None:
    """Kripto parayƒ± kullanƒ±cƒ±nƒ±n favorilerinden kaldƒ±rƒ±r."""
    if not context.args:
        update.message.reply_text(
            "L√ºtfen favorilerinizden kaldƒ±rmak istediƒüiniz kripto para kodunu belirtin. "
            "√ñrnek: /remove btc"
        )
        return

    crypto_id = context.args[0].lower()
    
    # Kripto kodu kƒ±saltmasƒ±nƒ± tam ada d√∂n√º≈üt√ºr
    crypto_id = convert_crypto_symbol(crypto_id)

    user_id = str(update.effective_user.id)
    
    # Kullanƒ±cƒ±nƒ±n favori listesini kontrol et
    if user_id not in user_favorites or crypto_id not in user_favorites[user_id]:
        update.message.reply_text(f"{crypto_id.capitalize()} favorilerinizde bulunamadƒ±!")
        return
    
    # Favorilerden kaldƒ±r
    user_favorites[user_id].remove(crypto_id)
    save_favorites(user_favorites)
    
    update.message.reply_text(f"{crypto_id.capitalize()} favorilerinizden kaldƒ±rƒ±ldƒ±! ‚úÖ")

def show_favorites(update: Update, context: CallbackContext) -> None:
    """Kullanƒ±cƒ±nƒ±n favori kripto paralarƒ±nƒ± g√∂sterir."""
    user_id = str(update.effective_user.id)
    
    # Kullanƒ±cƒ±nƒ±n favori listesini kontrol et
    if user_id not in user_favorites or not user_favorites[user_id]:
        update.message.reply_text("Hen√ºz favorilerinize kripto para eklemediniz! /add komutuyla ekleyebilirsiniz.")
        return
    
    message = "*Favori Kripto Paralarƒ±nƒ±z:*\n\n"
    
    for crypto_id in user_favorites[user_id]:
        result = get_crypto_price(crypto_id)
        if "error" not in result:
            price_usd = result["data"].get("usd", 0)
            change_24h = result["data"].get("usd_24h_change", 0)
            emoji = "üü¢" if change_24h > 0 else "üî¥"
            
            message += f"*{crypto_id.capitalize()}*\n"
            message += f"üíµ ${price_usd:,.2f} | {emoji} %{change_24h:.2f}\n"
            message += f"Daha fazla bilgi: `/price {crypto_id}`\n\n"
        else:
            message += f"*{crypto_id.capitalize()}*: Veri alƒ±namadƒ±\n\n"
    
    update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

def error_handler(update: Update, context: CallbackContext) -> None:
    """Bot hatalarƒ±nƒ± i≈üler."""
    logger.error(f"Update {update} caused error {context.error}")
    try:
        update.message.reply_text("ƒ∞≈ülem sƒ±rasƒ±nda bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.")
    except:
        pass

def portfolio_command(update: Update, context: CallbackContext) -> None:
    """Kullanƒ±cƒ±nƒ±n portf√∂y√ºn√º g√∂sterir."""
    user_id = str(update.effective_user.id)
    
    if user_id not in user_portfolios or "portfolio" not in user_portfolios[user_id]:
        update.message.reply_text(
            "Hen√ºz portf√∂y√ºn√ºzde kripto para bulunmuyor.\n"
            "ƒ∞≈ülem eklemek i√ßin /add_transaction komutunu kullanabilirsiniz."
        )
        return
    
    user_portfolio = user_portfolios[user_id]["portfolio"]
    
    if not user_portfolio:
        update.message.reply_text("Portf√∂y√ºn√ºz bo≈ü.")
        return
    
    message = "*üìä Portf√∂y√ºn√ºz:*\n\n"
    total_portfolio_value = 0
    
    for crypto_id, data in user_portfolio.items():
        amount = data["amount"]
        if amount <= 0:
            continue
            
        # G√ºncel fiyat bilgisini al
        price_data = get_crypto_price(crypto_id)
        
        if "error" not in price_data:
            price_usd = price_data["data"].get("usd", 0)
            price_try = price_data["data"].get("try", 0)
            
            value_usd = amount * price_usd
            value_try = amount * price_try
            total_portfolio_value += value_usd
            
            # ƒ∞smin ilk harfini b√ºy√ºk yap
            crypto_name = crypto_id.capitalize()
            
            message += f"*{crypto_name}*\n"
            message += f"üí∞ Miktar: {amount:.8f}\n"
            message += f"üíµ Deƒüer: ${value_usd:.2f} (‚Ç∫{value_try:.2f})\n"
            message += f"üè∑Ô∏è G√ºncel Fiyat: ${price_usd:.2f}\n\n"
        else:
            message += f"*{crypto_id.capitalize()}*: Fiyat verisi alƒ±namadƒ±\n\n"
    
    message += f"*Toplam Portf√∂y Deƒüeri:* ${total_portfolio_value:.2f}\n"
    message += "\nDetaylƒ± kar/zarar analizi i√ßin /performance komutunu kullanabilirsiniz."
    
    update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

def add_transaction(update: Update, context: CallbackContext) -> None:
    """Kullanƒ±cƒ±nƒ±n portf√∂y√ºne yeni bir i≈ülem ekler."""
    if not context.args or len(context.args) < 4:
        update.message.reply_text(
            "L√ºtfen i≈ülem bilgilerini doƒüru formatta girin:\n\n"
            "/add_transaction <crypto_kodu> <i≈ülem_tipi> <miktar> <fiyat> <tarih> <komisyon>\n\n"
            "√ñrnek:\n"
            "/add_transaction btc buy 0.05 35000 2023-11-20 10\n\n"
            "ƒ∞≈ülem tipleri: buy (alƒ±m) veya sell (satƒ±m)\n"
            "Tarih formatƒ±: YYYY-MM-DD (bo≈ü bƒ±rakƒ±lƒ±rsa bug√ºn√ºn tarihi kullanƒ±lƒ±r)\n"
            "Komisyon: ƒ∞≈ülem √ºcreti (bo≈ü bƒ±rakƒ±labilir, varsayƒ±lan: 0)"
        )
        return
    
    user_id = str(update.effective_user.id)
    
    try:
        # Arg√ºmanlarƒ± parse et
        crypto_id = context.args[0].lower()
        transaction_type = context.args[1].lower()
        
        # Miktar ve fiyat doƒürulamasƒ±
        try:
            amount = float(context.args[2])
            if amount <= 0:
                update.message.reply_text("Miktar sƒ±fƒ±rdan b√ºy√ºk olmalƒ±dƒ±r.")
                return
        except ValueError:
            update.message.reply_text("Ge√ßersiz miktar. L√ºtfen sayƒ±sal bir deƒüer girin.")
            return
            
        try:
            price = float(context.args[3])
            if price <= 0:
                update.message.reply_text("Fiyat sƒ±fƒ±rdan b√ºy√ºk olmalƒ±dƒ±r.")
                return
        except ValueError:
            update.message.reply_text("Ge√ßersiz fiyat. L√ºtfen sayƒ±sal bir deƒüer girin.")
            return
        
        # Tarih doƒürulamasƒ± (opsiyonel)
        today = datetime.now().strftime("%Y-%m-%d")
        date = today  # Varsayƒ±lan: bug√ºn
        
        if len(context.args) > 4:
            date_str = context.args[4]
            if validate_date(date_str):
                date = date_str
            else:
                update.message.reply_text(
                    f"Ge√ßersiz tarih formatƒ±: {date_str}\n"
                    f"L√ºtfen YYYY-MM-DD formatƒ±nda bir tarih girin. "
                    f"Varsayƒ±lan olarak bug√ºn√ºn tarihi ({today}) kullanƒ±lacak."
                )
        
        # Komisyon doƒürulamasƒ± (opsiyonel)
        fee = 0  # Varsayƒ±lan: 0
        if len(context.args) > 5:
            try:
                fee = float(context.args[5])
                if fee < 0:
                    update.message.reply_text("Komisyon negatif olamaz. Varsayƒ±lan olarak 0 kullanƒ±lacak.")
                    fee = 0
            except ValueError:
                update.message.reply_text("Ge√ßersiz komisyon. Varsayƒ±lan olarak 0 kullanƒ±lacak.")
        
        # Kripto kodu kƒ±saltmasƒ±nƒ± tam ada d√∂n√º≈üt√ºr
        crypto_id = convert_crypto_symbol(crypto_id)
        
        # ƒ∞≈ülem tipi kontrol√º
        if transaction_type not in ["buy", "sell"]:
            update.message.reply_text("Ge√ßersiz i≈ülem tipi. 'buy' veya 'sell' kullanƒ±n.")
            return
        
        # Kullanƒ±cƒ±nƒ±n portf√∂y√ºn√º olu≈ütur (yoksa)
        if user_id not in user_portfolios:
            user_portfolios[user_id] = {"portfolio": {}}
        
        if "portfolio" not in user_portfolios[user_id]:
            user_portfolios[user_id]["portfolio"] = {}
        
        # Kripto para portf√∂yde var mƒ± kontrol et
        if crypto_id not in user_portfolios[user_id]["portfolio"]:
            user_portfolios[user_id]["portfolio"][crypto_id] = {
                "amount": 0,
                "transactions": []
            }
        
        # Satƒ±≈ü yapƒ±lƒ±yorsa, yeterli miktar var mƒ± kontrol et
        if transaction_type == "sell":
            current_amount = user_portfolios[user_id]["portfolio"][crypto_id]["amount"]
            if amount > current_amount:
                update.message.reply_text(
                    f"Yeterli miktarda {crypto_id.capitalize()} yok. "
                    f"Mevcut miktar: {current_amount}"
                )
                return
        
        # ƒ∞≈ülemi portf√∂ye ekle
        transaction = {
            "date": date,
            "type": transaction_type,
            "amount": amount,
            "price": price,
            "fee": fee
        }
        
        user_portfolios[user_id]["portfolio"][crypto_id]["transactions"].append(transaction)
        
        # Toplam miktarƒ± g√ºncelle
        if transaction_type == "buy":
            user_portfolios[user_id]["portfolio"][crypto_id]["amount"] += amount
        else:  # sell
            user_portfolios[user_id]["portfolio"][crypto_id]["amount"] -= amount
        
        # Deƒüi≈üiklikleri kaydet
        save_portfolios(user_portfolios)
        
        update.message.reply_text(
            f"{transaction_type.capitalize()} i≈ülemi ba≈üarƒ±yla eklendi!\n"
            f"Kripto: {crypto_id.capitalize()}\n"
            f"Miktar: {amount}\n"
            f"Fiyat: ${price}\n"
            f"Tarih: {date}"
        )
    except Exception as e:
        logger.error(f"ƒ∞≈ülem eklenirken hata: {e}")
        update.message.reply_text(f"ƒ∞≈ülem eklenirken bir hata olu≈ütu: {str(e)}")

def performance_command(update: Update, context: CallbackContext) -> None:
    """Portf√∂y√ºn performansƒ±nƒ± ve kar/zarar durumunu g√∂sterir."""
    user_id = str(update.effective_user.id)
    
    if user_id not in user_portfolios or "portfolio" not in user_portfolios[user_id]:
        update.message.reply_text(
            "Hen√ºz portf√∂y√ºn√ºzde kripto para bulunmuyor.\n"
            "ƒ∞≈ülem eklemek i√ßin /add_transaction komutunu kullanabilirsiniz."
        )
        return
    
    user_portfolio = user_portfolios[user_id]["portfolio"]
    
    if not user_portfolio:
        update.message.reply_text("Portf√∂y√ºn√ºz bo≈ü.")
        return
    
    message = "*üìà Portf√∂y Performansƒ±:*\n\n"
    total_investment = 0
    total_current_value = 0
    
    for crypto_id, data in user_portfolio.items():
        if not data["transactions"]:
            continue
            
        # G√ºncel fiyat bilgisini al
        price_data = get_crypto_price(crypto_id)
        
        if "error" not in price_data:
            current_price = price_data["data"].get("usd", 0)
            current_amount = data["amount"]
            
            # Yatƒ±rƒ±m miktarƒ±nƒ± ve kar/zararƒ± hesapla
            invested = 0
            proceeds = 0
            
            for transaction in data["transactions"]:
                if transaction["type"] == "buy":
                    invested += transaction["amount"] * transaction["price"] + transaction["fee"]
                else:  # sell
                    proceeds += transaction["amount"] * transaction["price"] - transaction["fee"]
            
            # G√ºncel deƒüer
            current_value = current_amount * current_price
            
            # Toplam kar/zarar
            if current_amount > 0:
                total_buy_amount = sum(t["amount"] for t in data["transactions"] if t["type"] == "buy")
                
                # Sƒ±fƒ±ra b√∂lme kontrol√º
                if total_buy_amount > 0:
                    realized_pl = proceeds - (invested * (1 - current_amount / total_buy_amount))
                else:
                    realized_pl = proceeds
                
                unrealized_pl = current_value - invested + proceeds
                total_pl = unrealized_pl + realized_pl
                
                # Y√ºzde deƒüi≈üim - sƒ±fƒ±ra b√∂lme kontrol√º
                if invested > 0:
                    percent_change = (total_pl / invested) * 100
                else:
                    percent_change = 0
                
                # ƒ∞smin ilk harfini b√ºy√ºk yap
                crypto_name = crypto_id.capitalize()
                
                message += f"*{crypto_name}*\n"
                message += f"üí∞ Mevcut Miktar: {current_amount:.8f}\n"
                message += f"üíµ G√ºncel Deƒüer: ${current_value:.2f}\n"
                message += f"üí≤ Toplam Yatƒ±rƒ±m: ${invested:.2f}\n"
                
                emoji = "üü¢" if total_pl >= 0 else "üî¥"
                message += f"{emoji} Kar/Zarar: ${total_pl:.2f} (%{percent_change:.2f})\n\n"
                
                total_investment += invested
                total_current_value += current_value
            else:
                # T√ºm√º satƒ±lmƒ±≈ü
                realized_pl = proceeds - invested
                
                # Y√ºzde deƒüi≈üim - sƒ±fƒ±ra b√∂lme kontrol√º
                if invested > 0:
                    percent_change = (realized_pl / invested) * 100
                else:
                    percent_change = 0
                
                message += f"*{crypto_id.capitalize()}* (T√ºm√º Satƒ±ldƒ±)\n"
                emoji = "üü¢" if realized_pl >= 0 else "üî¥"
                message += f"{emoji} Ger√ßekle≈üen Kar/Zarar: ${realized_pl:.2f} (%{percent_change:.2f})\n\n"
        else:
            message += f"*{crypto_id.capitalize()}*: Fiyat verisi alƒ±namadƒ±\n\n"
    
    # Toplam portf√∂y performansƒ± - sƒ±fƒ±ra b√∂lme kontrol√º
    if total_investment > 0:
        total_pl = total_current_value - total_investment
        total_percent = (total_pl / total_investment) * 100
        
        message += f"*Toplam Portf√∂y:*\n"
        message += f"üí≤ Toplam Yatƒ±rƒ±m: ${total_investment:.2f}\n"
        message += f"üíµ G√ºncel Deƒüer: ${total_current_value:.2f}\n"
        
        emoji = "üü¢" if total_pl >= 0 else "üî¥"
        message += f"{emoji} Toplam Kar/Zarar: ${total_pl:.2f} (%{total_percent:.2f})"
    elif total_current_value > 0:
        # Toplam yatƒ±rƒ±m sƒ±fƒ±rsa ancak portf√∂yde deƒüer varsa
        message += f"*Toplam Portf√∂y:*\n"
        message += f"üíµ G√ºncel Deƒüer: ${total_current_value:.2f}\n"
        message += "üí≤ Yatƒ±rƒ±m miktarƒ± hesaplanamadƒ±"
    
    update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

def list_transactions(update: Update, context: CallbackContext) -> None:
    """Kullanƒ±cƒ±nƒ±n t√ºm i≈ülemlerini listeler."""
    user_id = str(update.effective_user.id)
    
    if user_id not in user_portfolios or "portfolio" not in user_portfolios[user_id]:
        update.message.reply_text("Hen√ºz hi√ß i≈üleminiz bulunmuyor.")
        return
    
    message = "*üìú ƒ∞≈ülem Ge√ßmi≈üiniz:*\n\n"
    transaction_count = 0
    
    for crypto_id, data in user_portfolios[user_id]["portfolio"].items():
        if not data["transactions"]:
            continue
            
        message += f"*{crypto_id.capitalize()}*:\n"
        
        for i, transaction in enumerate(data["transactions"]):
            transaction_type = "Alƒ±m" if transaction["type"] == "buy" else "Satƒ±m"
            transaction_count += 1
            
            message += f"{i+1}. {transaction_type}: {transaction['amount']} adet\n"
            message += f"   Fiyat: ${transaction['price']}\n"
            message += f"   Tarih: {transaction['date']}\n"
        
        message += "\n"
    
    if transaction_count == 0:
        update.message.reply_text("Hen√ºz hi√ß i≈üleminiz bulunmuyor.")
        return
    
    message += "ƒ∞≈ülem silmek i√ßin /delete_transaction [kripto_kodu] [i≈ülem_no] komutunu kullanabilirsiniz."
    
    update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

def delete_transaction(update: Update, context: CallbackContext) -> None:
    """Belirtilen i≈ülemi siler."""
    if len(context.args) < 2:
        update.message.reply_text(
            "Silmek istediƒüiniz i≈ülemi belirtin:\n"
            "/delete_transaction [kripto_kodu] [i≈ülem_no]\n\n"
            "ƒ∞≈ülemlerinizi g√∂rmek i√ßin /list_transactions komutunu kullanabilirsiniz."
        )
        return
    
    user_id = str(update.effective_user.id)
    
    try:
        crypto_id = context.args[0].lower()
        
        # ƒ∞≈ülem numarasƒ± doƒürulamasƒ±
        try:
            transaction_index = int(context.args[1]) - 1  # Kullanƒ±cƒ± 1'den ba≈ülayarak sayar
            if transaction_index < 0:
                update.message.reply_text("ƒ∞≈ülem numarasƒ± 1'den k√º√ß√ºk olamaz.")
                return
        except ValueError:
            update.message.reply_text("ƒ∞≈ülem numarasƒ± bir sayƒ± olmalƒ±dƒ±r.")
            return
        
        # Kripto kodu kƒ±saltmasƒ±nƒ± tam ada d√∂n√º≈üt√ºr
        crypto_id = convert_crypto_symbol(crypto_id)
        
        # Portf√∂y ve i≈ülem kontrol√º
        if (user_id not in user_portfolios or 
            "portfolio" not in user_portfolios[user_id] or 
            crypto_id not in user_portfolios[user_id]["portfolio"] or 
            "transactions" not in user_portfolios[user_id]["portfolio"][crypto_id] or 
            transaction_index >= len(user_portfolios[user_id]["portfolio"][crypto_id]["transactions"])):
            
            update.message.reply_text("Ge√ßersiz kripto para veya i≈ülem numarasƒ±.")
            return
        
        # ƒ∞≈ülemi al
        transaction = user_portfolios[user_id]["portfolio"][crypto_id]["transactions"][transaction_index]
        
        # Toplam miktarƒ± g√ºncelle
        if transaction["type"] == "buy":
            user_portfolios[user_id]["portfolio"][crypto_id]["amount"] -= transaction["amount"]
        else:  # sell
            user_portfolios[user_id]["portfolio"][crypto_id]["amount"] += transaction["amount"]
        
        # ƒ∞≈ülemi sil
        del user_portfolios[user_id]["portfolio"][crypto_id]["transactions"][transaction_index]
        
        # Deƒüi≈üiklikleri kaydet
        save_portfolios(user_portfolios)
        
        update.message.reply_text(
            f"ƒ∞≈ülem ba≈üarƒ±yla silindi!\n"
            f"Kripto: {crypto_id.capitalize()}\n"
            f"ƒ∞≈ülem Tipi: {transaction['type']}\n"
            f"Miktar: {transaction['amount']}\n"
            f"Fiyat: ${transaction['price']}"
        )
    except Exception as e:
        logger.error(f"ƒ∞≈ülem silinirken hata: {e}")
        update.message.reply_text(f"ƒ∞≈ülem silinirken bir hata olu≈ütu: {str(e)}")

def main() -> None:
    """Bot'u ba≈ülatƒ±r."""
    # Telegram API token'ƒ±nƒ± √ßevresel deƒüi≈ükenlerden al
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN √ßevresel deƒüi≈ükeni ayarlanmamƒ±≈ü!")
        return
    
    # Updater'ƒ± ba≈ülat
    updater = Updater(token)
    
    # Dispatcher'ƒ± al
    dispatcher = updater.dispatcher
    
    # Komut i≈üleyicilerini ekle
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("price", price_command))
    dispatcher.add_handler(CommandHandler("list", list_command))
    dispatcher.add_handler(CommandHandler("top", top_command))
    dispatcher.add_handler(CommandHandler("add", add_favorite))
    dispatcher.add_handler(CommandHandler("remove", remove_favorite))
    dispatcher.add_handler(CommandHandler("favorites", show_favorites))
    
    # Portf√∂y komutlarƒ±nƒ± ekle
    dispatcher.add_handler(CommandHandler("portfolio", portfolio_command))
    dispatcher.add_handler(CommandHandler("add_transaction", add_transaction))
    dispatcher.add_handler(CommandHandler("performance", performance_command))
    dispatcher.add_handler(CommandHandler("list_transactions", list_transactions))
    dispatcher.add_handler(CommandHandler("delete_transaction", delete_transaction))
    
    # Hata i≈üleyicisini ekle
    dispatcher.add_error_handler(error_handler)
    
    # Bot'u ba≈ülat
    updater.start_polling()
    logger.info("Bot ba≈ülatƒ±ldƒ±!")
    
    # Bot Ctrl+C ile durdurulana kadar √ßalƒ±≈ümaya devam et
    updater.idle()

if __name__ == '__main__':
    main() 